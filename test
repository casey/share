#!/usr/bin/env python3.3

import sys, time, uuid, requests, os, random, hashlib

endpoint = sys.argv[1]
maximumContentLength = 128

def die(msg):
  sys.stdout.write("ERROR: %s\n" % msg)
  sys.exit(1)

def ok(msg):
  sys.stdout.write("OK: %s\n" % msg)

# test index
r = requests.get(endpoint)
r.status_code == 200 or die('index not being served')
"share" in r.text or die('served index looks weird: %s' % r.text)
ok('index retrieved')

# test random urls fail
requests.get('%s/xyz' % endpoint).status_code == 404 or die('get /xyz worked')
requests.put('%s/xyz' % endpoint).status_code == 404 or die('put /xyz worked')

license = 'Anyone may do anything with this.'

def check(r):
  r.headers['Warranty'] == '"AS IS" WITH NO WARRANTY OF ANY KIND EXPRESS OR IMPLIED.' or die('check: warranty')
  r.headers['License'] == license or die ('check: license')
  r.headers['Access-Control-Allow-Origin'] == '*' or die('check: access control allow origin')

class TestCase:
  def __init__(_, *, length=None, ext='', good=True, license=license):
    if length == None:
      length = random.randint(8, maximumContentLength)
    _.content = os.urandom(length)
    sha = hashlib.sha256()
    sha.update(_.content)
    if not good:
      sha.update(b'!')
    _.key = sha.hexdigest()
    _.ext = ext
    _.license = license
    _.good = good

  def get(_):
    r = requests.get("%s/%s%s" % (endpoint, _.key, _.ext))
    check(r)
    return r

  def put(_):
    headers = {'License': _.license}
    r = requests.put("%s/%s" % (endpoint, _.key), data=_.content, headers=headers)
    check(r)
    return r

# test good
for i in range(5):
  case = TestCase(length=0 if i == 0 else None) # test empty body at least once
  r = case.put()
  if i == 0:
    r.status_code == 200 or die('put failed: %s: %s' % (r.status_code, r.url))
  else:
    r.status_code == 201 or die('put failed: %s' % r.status_code)
  r = case.get()
  r.status_code == 200 or die('get failed: %s' % r.status_code)
  r.content == case.content or die('get got bad data')
  ok('%s' % r.url)

# test bad checksum
for _ in range(5):
  case = TestCase(good=False, length=0 if i == 0 else None)
  r = case.put()
  r.status_code == 403 or die('bad put not 403: %s' % r.status_code)
  r = case.get()
  r.status_code == 404 or die('bad get not 404: %s' % r.status_code)
  ok('bad checksum rejected')

# test too long
for _ in range(5):
  case = TestCase(length=maximumContentLength + random.randint(1, 1000))
  r = case.put()
  r.status_code == 413 or die('long put not 413: %s' % r.status_code)
  r = case.get()
  r.status_code == 404 or die('bad get not 404: %s' % r.status_code)
  ok('too much data rejected')

# test bad license
for _ in range(5):
  case = TestCase(license="Some random conditions.")
  r = case.put()
  r.status_code == 403 or die('put with bad license not 403: %s' % r.status_code)
  r = case.get()
  r.status_code == 404 or die('bad get not 404: %s' % r.status_code)
  ok('bad license rejected')

extensions = {
  '':       'application/octet-stream',
  '.txt':   'text/plain; charset=utf-8',
  '.png':   'image/png',
  '.sniff': 'text/plain; charset=utf-8',
}

r = TestCase(length=0).put()
r.status_code == 200 or r.status_code == 201 or die('put empty body failed')

for ext, correct in extensions.items():
  case = TestCase(ext=ext, length=0)
  r = case.get()
  r.content == case.content or die('get got bad data')
  got = r.headers['Content-Type']
  got == correct or die('got bad content type for extension "%s": "%s"' % (ext, got))
  ok('got correct content type for %s: %s' % (ext, got))
